--ELOY RODAL PÉREZ

IF EXISTS (SELECT * FROM sys.databases WHERE name = 'CONFLICTOSBELICOS')
DROP DATABASE CONFLICTOSBELICOS ;
go

CREATE DATABASE CONFLICTOSBELICOS
ON PRIMARY(	
		NAME = conflictos_data,
		FILENAME = 'C:\basedatos\conflictosbelicos\conflictos_data.mdf',
		SIZE = 5MB,
		FILEGROWTH = 15%
		),
		FILEGROUP grupo_interviene(
		NAME= grupo_datos1,
		FILENAME='C:\basedatos\conflictosbelicos\grupo_datos1.ndf',
		SIZE = 8MB,
		FILEGROWTH = 5MB
	),
		FILEGROUP grupo_traficantes(
		NAME= traficante_datos1,
		FILENAME='C:\basedatos\conflictosbelicos\grupo_datos2.ndf',
		SIZE = 5MB,
		FILEGROWTH = 3MB,
		MAXSIZE = 12MB
	)
	log on
	(
	NAME= conflicto1_log,
		FILENAME='C:\basedatos\conflictosbelicos\conflicto1_log.ldf',
		SIZE = 5MB,
		FILEGROWTH = 3MB,
		MAXSIZE = 12MB
	), (
	NAME= conflicto2_log,
		FILENAME='C:\basedatos\conflictosbelicos\conflicto2_log.ldf',
		SIZE = 5MB,
		FILEGROWTH = 3MB,
		MAXSIZE = 12MB
	)
	go

--TIPO DE DATOS FECHA
IF EXISTS (SELECT * FROM sys.types WHERE name = 'Fecha')
	DROP TYPE Fecha
go
CREATE TYPE Fecha FROM smalldatetime NOT NULL
go

--COMPROBACIÓN CREACIÓN DB
SELECT * FROM sys.databases
EXEC sp_helpdb 'CONFLICTOSBELICOS'

--COMPROBACIÓN ARCHIVOS
exec sp_helpfile

--COMPROBACIÓN GRUPOS DE ARCHIVOS
select * from sys.filegroups
exec sp_helpfilegroup


--TABLA //CONFLICTORACIAL//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'CONFLICTORACIAL')
	DROP TABLE CONFLICTORACIAL
go
CREATE TABLE CONFLICTORACIAL (
	CodConflicto tinyint NOT NULL,
	Etnia varchar(20) NOT NULL
	
	CONSTRAINT PK_CONFLICTORACIAL PRIMARY KEY (CodConflicto, Etnia),
	CONSTRAINT FK_CodConflicto_CONFLICTO FOREIGN KEY (CodConflicto) REFERENCES CONFLICTO(CodConflicto) ON DELETE NO ACTION ON UPDATE NO ACTION
	)
ON [PRIMARY]
go


--TABLA //CONFLICTOTERRITORIAL//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'CONFLICTOTERRITORIAL')
	DROP TABLE CONFLICTOTERRITORIAL
go
CREATE TABLE CONFLICTOTERRITORIAL (
	CodConflicto tinyint NOT NULL,
	CodRegión tinyint NOT NULL
	
	CONSTRAINT PK_CONFLICTOTERRITORIAL PRIMARY KEY (CodConflicto, CodRegión),
	CONSTRAINT FK_CodConflicto_CONFLICTO FOREIGN KEY (CodConflicto) REFERENCES CONFLICTO(CodConflicto) ON DELETE NO ACTION ON UPDATE NO ACTION,
)
ON [PRIMARY]
go

--TABLA //CONFLICTORELIGIOSO//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'CONFLICTORELIGIOSO')
	DROP TABLE CONFLICTORELIGIOSO
go
CREATE TABLE CONFLICTORELIGIOSO (
	CodConflicto tinyint NOT NULL,
	CodReligión tinyint NOT NULL
	
	CONSTRAINT PK_CONFLICTORELIGIOSO PRIMARY KEY (CodConflicto, CodReligión),
	CONSTRAINT FK_CodConflicto_CONFLICTO FOREIGN KEY (CodConflicto) REFERENCES CONFLICTO(CodConflicto) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ON [PRIMARY]
go

--TABLA //CONFLICTOECONÓMICO//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'CONFLICTOECONÓMICO')
	DROP TABLE CONFLICTOECONÓMICO
go
CREATE TABLE CONFLICTOECONÓMICO(
	CodConflicto tinyint NOT NULL,
	CodMateriaPrima tinyint NOT NULL
	
	CONSTRAINT PK_CONFLICTOECONOMICO PRIMARY KEY (CodConflicto, CodMateriaPrima),
	CONSTRAINT FK_CodConflicto_CONFLICTO FOREIGN KEY (CodConflicto) REFERENCES CONFLICTO(CodConflicto) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ON [PRIMARY]
go

--TABLA //PAÍS//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'PAÍS')
	DROP TABLE PAÍS
go
CREATE TABLE PAÍS(
	CodConflicto tinyint NOT NULL,
	CodPaís tinyint NOT NULL
	
	CONSTRAINT PK_PAÍS PRIMARY KEY (CodConflicto, CodPaís),
	CONSTRAINT FK_CodConflicto_CONFLICTO FOREIGN KEY (CodConflicto) REFERENCES CONFLICTO(CodConflicto) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ON [PRIMARY]
go

--TABLA //CONFLICTO//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'CONFLICTO')
	DROP TABLE CONFLICTO
go
CREATE TABLE CONFLICTO(
	CodConflicto tinyint NOT NULL,
	NombreConflicto varchar(50) NOT NULL,
	MuertosConflicto int NOT NULL,
	HeridosConflicto int NOT NULL,
	CausaConflicto varchar(50) NOT NULL
	
	CONSTRAINT PK_CONFLICTO PRIMARY KEY (CodConflicto)
)
ON [PRIMARY]
go

--TABLA //GRUPO//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'GRUPO')
	DROP TABLE GRUPO
go
CREATE TABLE GRUPO(
	CodGrupo tinyint NOT NULL,
	NombreGrupo varchar(25) NOT NULL,
	BajasGrupo smallint NOT NULL,
	
	CONSTRAINT PK_GRUPO PRIMARY KEY (CodGrupo),
	CONSTRAINT UQ_Nombre_GRUPO UNIQUE (NombreGrupo)
)
ON grupo_interviene
go

--TABLA //INTERVIENE//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'INTERVIENE')
	DROP TABLE INTERVIENE
go
CREATE TABLE INTERVIENE(
	Grupo tinyint NOT NULL,
	Conflicto tinyint NOT NULL,
	FechaInicio fecha NOT NULL CONSTRAINT DF_FechaInicio_INTERVIENE DEFAULT getDate(),
	FechaFin fecha NOT NULL
	
	CONSTRAINT PK_INTERVIENE PRIMARY KEY (Grupo, Conflicto, FechaInicio),
	CONSTRAINT FK_Grupo_INTERVIENE FOREIGN KEY (Grupo) REFERENCES GRUPO(CodGrupo) ON DELETE CASCADE ON UPDATE CASCADE
) 
ON grupo_interviene
go

--TABLA //DIVISIÓN//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'DIVISIÓN')
	DROP TABLE DIVISIÓN
go
CREATE TABLE DIVISIÓN(
	Grupo tinyint NOT NULL,
	División tinyint NOT NULL,
	Bajas int NOT NULL,
	Hombres int NOT NULL,
	Aviones tinyint NOT NULL,
	Tanques tinyint NOT NULL,
	Barcos tinyint NOT NULL
	
	CONSTRAINT PK_INTERVIENE PRIMARY KEY (Grupo, División),
	CONSTRAINT FK_Grupo FOREIGN KEY (Grupo) REFERENCES GRUPO(CodGrupo) ON DELETE CASCADE ON UPDATE CASCADE
)
ON grupo_interviene
go

--TABLA //LÍDER//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'LÍDER')
	DROP TABLE LÍDER
go
CREATE TABLE LÍDER(
	CodGrupo tinyint NOT NULL,
	CodLider char(5) NOT NULL,
	Apoyos tinyint NOT NULL
	
	CONSTRAINT PK_LÍDER PRIMARY KEY (CodGrupo, CodLider),
	CONSTRAINT FK_CodGrupoLider FOREIGN KEY (CodGrupo) REFERENCES GRUPO (CodGrupo) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT CK_Lider CHECK (CodLider LIKE 'LD[0-9][0-9][0-9]' or CodLider LIKE 'LR[0-9][0-9][0-9]')
)
ON grupo_interviene
go

--TABLA //JEFE//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'JEFE')
	DROP TABLE JEFE
go
CREATE TABLE JEFE(
	CodJefe tinyint NOT NULL,
	RangoJefe varchar(10) NOT NULL,
	Grupo tinyint NULL,
	Division tinyint NULL,
	Lider char(5) NOT NULL,
	CodGrupo tinyint NOT NULL
	
	CONSTRAINT PK_JEFE PRIMARY KEY (CodJefe),
	CONSTRAINT FK_DIVISION_JEFE FOREIGN KEY (Grupo, Division) REFERENCES DIVISIÓN(Grupo, División) ON DELETE NO ACTION ON UPDATE CASCADE,
	CONSTRAINT FK_LIDER_JEFE FOREIGN KEY (Lider, CodGrupo) REFERENCES LÍDER(CodLider, CodGrupo) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ON grupo_interviene
go

--TABLA //ARMA//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'ARMA')
	DROP TABLE ARMA
go
CREATE TABLE ARMA(
	Codigo tinyint NOT NULL,
	Indicador varchar(20) NOT NULL
	
	CONSTRAINT PK_ARMA PRIMARY KEY (Codigo)
)
ON grupo_traficantes
go

--TABLA //TRAFICANTE//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'TRAFICANTE')
	DROP TABLE TRAFICANTE
go
CREATE TABLE TRAFICANTE(
	NombreTraficante varchar(25) NOT NULL
	
	CONSTRAINT PK_TRAFICANTE PRIMARY KEY (NombreTraficante),
	CONSTRAINT UK_NombreTraficante_TRAFICANTE UNIQUE (NombreTraficante)
)
ON grupo_traficantes
go

--TABLA //STOCK//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'STOCK')
	DROP TABLE STOCK
go
CREATE TABLE STOCK(
	Arma tinyint NOT NULL,
	Traficante varchar(25) NOT NULL,
	Cantidad tinyint NOT NULL
	
	CONSTRAINT PK_STOCK PRIMARY KEY (Arma, Traficante),
	CONSTRAINT FK_Arma_STOCK FOREIGN KEY (Arma) REFERENCES ARMA(Codigo) ON DELETE NO ACTION ON UPDATE CASCADE,
	CONSTRAINT FK_Traficante_STOCK FOREIGN KEY (Traficante) REFERENCES TRAFICANTE (NombreTraficante) ON DELETE CASCADE ON UPDATE CASCADE
) ON grupo_traficantes
go

--TABLA //SUMINISTRA//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'SUMINISTRA')
	DROP TABLE SUMINISTRA
go
CREATE TABLE SUMINISTRA(
	Grupo tinyint NOT NULL,
	Arma tinyint NOT NULL,
	Traficante varchar(25) NOT NULL,
	NumArmas tinyint NOT NULL
	
	CONSTRAINT PK_STOCK PRIMARY KEY (Arma, Traficante),
	CONSTRAINT FK_Arma_STOCK FOREIGN KEY (Arma) REFERENCES ARMA(Codigo) ON DELETE NO ACTION ON UPDATE CASCADE,
	CONSTRAINT FK_Traficante_STOCK FOREIGN KEY (Traficante) REFERENCES TRAFICANTE(NombreTraficante) ON DELETE CASCADE ON UPDATE CASCADE

)
ON grupo_traficantes
go

--TABLA //ORGANIZACIONES//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'ORGANIZACIONES')
	DROP TABLE ORGANIZACIONES
go
CREATE TABLE ORGANIZACIONES(
	Codigo tinyint NOT NULL,
	Nombre varchar(50) NOT NULL,
	Tipo varchar(25) NOT NULL,
	Depende_de tinyint null
	
	CONSTRAINT PK_ORGANIZACIONES PRIMARY KEY (Codigo),
	CONSTRAINT FK_DependeDe_Organizaciones FOREIGN KEY (Depende_de) REFERENCES ORGANIZACIONES(Codigo) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT CK_Tipo_ORGANIZACIONES CHECK (TIpo IN ('Gubernamental', 'No Gubernamental','Internacional'))
)
ON grupo_organizaciones
GO

--TABLA //DIALOGA//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'DIALOGA')
	DROP TABLE DIALOGA
go
CREATE TABLE DIALOGA(
	Grupo tinyint NOT NULL,
	Líder char(5) not null,
	Organización tinyint NOT NULL
	
	CONSTRAINT PK_DIALOGA PRIMARY KEY (Grupo, Líder, Organización),
	CONSTRAINT FK_Lider_DIALOGA FOREIGN KEY (líder, Grupo) REFERENCES LÍDER(CodLider, CodGrupo) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FK_Organizacion_DIALOGA FOREIGN KEY (Organización) REFERENCES ORGANIZACIONES(Codigo)ON DELETE CASCADE ON UPDATE CASCADE
	
)
ON grupo_organizaciones
go

--TABLA //MEDIA//
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'MEDIA')
	DROP TABLE MEDIA
go
CREATE TABLE MEDIA(
	Conflicto tinyint NOT NULL,
	Organización tinyint NOT NULL,
	FechaInicio fecha NOT NULL CONSTRAINT DF_FechaInicio_INTERVIENE DEFAULT getDate(),
	FechaFin fecha NULL,
	T_Ayuda varchar(20) NOT NULL,
	Desplegados tinyint NOT NULL
	
	CONSTRAINT PK_MEDIA PRIMARY KEY (Conflicto, Organización, FechaInicio),
	CONSTRAINT FK_Conflicto_MEDIA FOREIGN KEY (Conflicto) REFERENCES CONFLICTO(CodConflicto) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FK_Organizacion_MEDIA FOREIGN KEY (Organización) REFERENCES ORGANIZACIONES(Codigo) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT CK_TipoAyuda_MEDIA CHECK (T_Ayuda IN ('Médica', 'Diplomática', 'Presencial'))
)
ON grupo_organizaciones
go

--CREACIÓN DEL ESQUEMA CONFLICTOS
IF EXISTS(SELECT * FROM sys.schemas WHERE name = 'CONFLICTOS')
	DROP SCHEMA CONFLICTOS
go
CREATE SCHEMA CONFLICTOS AUTHORIZATION db_owner
go

ALTER SCHEMA CONFLICTOS TRANSFER dbo.RACIAL
go
ALTER SCHEMA CONFLICTOS TRANSFER dbo.TERRITORIAL
go
ALTER SCHEMA CONFLICTOS TRANSFER dbo.RELIGIOSO
go
ALTER SCHEMA CONFLICTOS TRANSFER dbo.ECONOMICO
go
ALTER SCHEMA CONFLICTOS TRANSFER dbo.PAIS
go
ALTER SCHEMA CONFLICTOS TRANSFER dbo.CONFLICTO
go

--CREACIÓN DEL ESQUEMA GRUPOS
IF EXISTS(SELECT * FROM sys.schemas WHERE name = 'GRUPOS')
	DROP SCHEMA GRUPOS
go
CREATE SCHEMA GRUPOS AUTHORIZATION db_owner
go
ALTER SCHEMA GRUPOS TRANSFER dbo.GRUPO
go
ALTER SCHEMA GRUPOS TRANSFER dbo.INTERVIENE
go
ALTER SCHEMA GRUPOS TRANSFER dbo.DIVISION
go
ALTER SCHEMA GRUPOS TRANSFER dbo.LIDER
go
ALTER SCHEMA GRUPOS TRANSFER dbo.JEFE
go
--CREACIÓN DEL ESQUEMA TRAFICANTES
IF EXISTS(SELECT * FROM sys.schemas WHERE name = 'TRAFICANTES')
	DROP SCHEMA TRAFICANTES
go
CREATE SCHEMA TRAFICANTES AUTHORIZATION db_owner
go
ALTER SCHEMA TRAFICANTES TRANSFER dbo.ARMA
go
ALTER SCHEMA TRAFICANTES TRANSFER dbo.TRAFICANTE
go
ALTER SCHEMA TRAFICANTES TRANSFER dbo.STOCK
go
ALTER SCHEMA TRAFICANTES TRANSFER dbo.SUMINISTRA
go
--CREACIÓN DEL ESQUEMA ORGANIZACIONES
IF EXISTS(SELECT * FROM sys.schemas WHERE name = 'ORGANIZACIONES')
	DROP SCHEMA ORGANIZACIONES
go
CREATE SCHEMA ORGANIZACIONES AUTHORIZATION db_owner
go
ALTER SCHEMA ORGANIZACIONES TRANSFER dbo.ORGANIZACIONES
go
ALTER SCHEMA ORGANIZACIONES TRANSFER dbo.DIALOGA
go
ALTER SCHEMA ORGANIZACIONES TRANSFER dbo.MEDIA
go

--c
--EL TIPO DE DATOS FUE CREADO AL PRINCIPIO DE LA BD.

--d
ALTER TABLE CONFLICTO
ADD CONSTRAINT CK_CausaConflicto_TIPO CHECK (CausaConflicto IN ('Racial', 'Territorial','Religioso', 'Económico'))

--e
--YA CREADO EN LA TABLA.

--f
--YA CREADO EN LA TABLA.

--g
--YA CREADO EN LA TABLA.

--h
--YA CREADO EN LA TABLA.

--i
--i.1
ALTER TABLE ARMA
ADD CONSTRAINT CK_IndicadorArma CHECK (indicador > 100)
go
---i.2
IF EXISTS(SELECT * FROM sys.schemas WHERE name = 'ARMAS')
	DROP SCHEMA ARMAS
go
CREATE SCHEMA ARMAS AUTHORIZATION db_owner
go
ALTER SCHEMA ARMAS TRANSFER dbo.ARMA;
go

--i.3
ALTER TABLE ARMAS.ARMA
	ADD tipo varchar(50) NOT NULL
go

ALTER TABLE ARMAS.ARMA
	ADD CONSTRAINT UQ_Tipos_ARMA UNIQUE (tipo)
go

CREATE TABLE CATEGORIA (
	NombreCat varchar(20) NOT NULL,
	Descripcion varchar(200) NOT NULL
	
	CONSTRAINT PK_CATEGORIA PRIMARY KEY (NombreCat),
	CONSTRAINT CK_Nombre_CATEGORIA CHECK (NombreCat IN ('Armas de fuego', 'Misiles', 
	'Armas biológicas', 'Armas químicas', 'Armas nucleares', 'Cohetes'))
)
go

ALTER SCHEMA ARMAS TRANSFER dbo.CATEGORIA
go

ALTER TABLE ARMAS.ARMA
	ADD categoria varchar(20) NOT NULL
go
ALTER TABLE ARMAS.ARMA
	ADD CONSTRAINT FK_categoria_ARMA FOREIGN KEY (categoria) REFERENCES CATEGORIA(NombreCat)
go

--4
ALTER TABLE ARMA
DROP indicador
go

--5.
ALTER TABLE ARMAS.ARMA
DROP COLUMN alcance
	ADD alcance smallint NOT NULL,
	tipoAlcance varchar(10) NOT NULL,
	CONSTRAINT DF_tipoAlcance_ARMA DEFAULT 'kilómetros'
go

--6.
ALTER TABLE TRAFICANTE
ADD Nacionalidad varchar (20) NOT NULL